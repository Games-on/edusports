package com.example.checkscam.service.impl;

import com.example.checkscam.constant.TournamentStatus;
import com.example.checkscam.dto.response.DashboardStatsResponseDTO;
import com.example.checkscam.entity.Match;
import com.example.checkscam.entity.Team; // Import Team class
import com.example.checkscam.repository.MatchRepository;
import com.example.checkscam.repository.TeamRepository;
import com.example.checkscam.repository.TournamentRepository;
import com.example.checkscam.repository.UserRepository;
import com.example.checkscam.service.DashboardStatsService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Arrays;

@Service
@Transactional(readOnly = true)
@Slf4j
public class DashboardStatsServiceImpl implements DashboardStatsService {

    @Autowired
    private TournamentRepository tournamentRepository;

    @Autowired
    private TeamRepository teamRepository;

    @Autowired
    private MatchRepository matchRepository;

    @Autowired
    private UserRepository userRepository;

    @Override
    public DashboardStatsResponseDTO getDashboardStats() {
        log.info("üìä Calculating dashboard statistics...");
        
        try {
            // T√≠nh s·ªë tournaments ƒëang ho·∫°t ƒë·ªông (REGISTRATION, READY_TO_START, ONGOING)
            Long activeTournaments = tournamentRepository.countByStatusIn(
                Arrays.asList(
                    TournamentStatus.REGISTRATION,
                    TournamentStatus.READY_TO_START,
                    TournamentStatus.ONGOING
                )
            );
            log.info("‚úÖ Active tournaments: {}", activeTournaments);

            // T√≠nh t·ªïng s·ªë tournaments
            Long totalTournaments = tournamentRepository.count();
            log.info("‚úÖ Total tournaments: {}", totalTournaments);

            // T√≠nh s·ªë tournaments ƒë√£ ho√†n th√†nh
            Long completedTournaments = tournamentRepository.countByStatus(TournamentStatus.COMPLETED);
            log.info("‚úÖ Completed tournaments: {}", completedTournaments);

            // T√≠nh s·ªë teams ƒë√£ ƒëƒÉng k√Ω (ACTIVE teams) - FIX: Use Team.TeamStatus
            Long registeredTeams = teamRepository.countByStatus(Team.TeamStatus.ACTIVE);
            log.info("‚úÖ Registered teams: {}", registeredTeams);

            // T√≠nh s·ªë matches ƒë√£ ch∆°i
            Long matchesPlayed = matchRepository.countByStatus(Match.MatchStatus.COMPLETED);
            log.info("‚úÖ Matches played: {}", matchesPlayed);

            // T√≠nh t·ªïng s·ªë matches
            Long totalMatches = matchRepository.count();
            log.info("‚úÖ Total matches: {}", totalMatches);

            // T√≠nh s·ªë matches ƒëang pending
            Long pendingMatches = matchRepository.countByStatusIn(
                Arrays.asList(Match.MatchStatus.SCHEDULED, Match.MatchStatus.LIVE)
            );
            log.info("‚úÖ Pending matches: {}", pendingMatches);

            // T√≠nh success rate (% matches ƒë∆∞·ª£c ho√†n th√†nh th√†nh c√¥ng)
            Double successRate = 0.0;
            if (totalMatches > 0) {
                successRate = (matchesPlayed.doubleValue() / totalMatches.doubleValue()) * 100;
            }
            log.info("‚úÖ Success rate: {}%", String.format("%.1f", successRate));

            // T√≠nh t·ªïng s·ªë users
            Long totalUsers = userRepository.count();
            log.info("‚úÖ Total users: {}", totalUsers);

            DashboardStatsResponseDTO stats = new DashboardStatsResponseDTO(
                activeTournaments,
                registeredTeams,
                matchesPlayed,
                successRate,
                totalUsers,
                completedTournaments,
                totalTournaments,
                pendingMatches,
                totalMatches
            );

            log.info("üìä Dashboard statistics calculation completed successfully");
            return stats;

        } catch (Exception e) {
            log.error("‚ùå Error calculating dashboard statistics: {}", e.getMessage(), e);
            
            // Return default stats in case of error
            return new DashboardStatsResponseDTO(
                0L, 0L, 0L, 0.0, 0L, 0L, 0L, 0L, 0L
            );
        }
    }
}
